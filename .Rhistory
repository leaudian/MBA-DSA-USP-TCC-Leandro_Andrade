View(BD_Neural_Networks)
View(BD_Neural_Networks)
rm(BD_Teste,BD_Treino,BD_Amostra)
# Pacotes -----------------------------------------------------------------
library(dplyr)
library("tidyverse")
library(openxlsx)
library(readxl)
library(neuralnet)
library(rpart)
# Banco de dados ----------------------------------------------------------
#Caminho
Caminho=paste0(getwd(),"/")
#Carregar arquivo resultante da etapa anterior
BD_Normalizado<-read_excel(paste0(Caminho,"BD_Normalizado_Backup.xlsx"))
BD_Amostra<-read_excel(paste0(Caminho,"BD_Amostra_Backup.xlsx"))
#Remoção das variáveis times (resultado da etapa de PCA)
BD_Neural_Networks<-BD_Normalizado[,1:19]
rm(BD_Normalizado)
# Variáveis ---------------------------------------------------------------
set.seed(0)
MSE<-0
lr<-0.1
funcao_ativacao<-function(x) log(1+exp(x))
camadas<-1
neuronios<-5
rede<-rep(neuronios,each=camadas)
# Rede --------------------------------------------------------------------
for(m in 1:5){
if (m==1)
{BD_Treino<-BD_Neural_Networks %>% filter(!BD_Neural_Networks$Batch_Fold_Index=="A")
BD_Teste<-BD_Neural_Networks %>% filter(BD_Neural_Networks$Batch_Fold_Index=="A")}
if (m==2)
{BD_Treino<-BD_Neural_Networks %>% filter(!BD_Neural_Networks$Batch_Fold_Index=="B")
BD_Teste<-BD_Neural_Networks %>% filter(BD_Neural_Networks$Batch_Fold_Index=="B")}
if (m==3)
{BD_Treino<-BD_Neural_Networks %>% filter(!BD_Neural_Networks$Batch_Fold_Index=="C")
BD_Teste<-BD_Neural_Networks %>% filter(BD_Neural_Networks$Batch_Fold_Index=="C")}
if (m==4)
{BD_Treino<-BD_Neural_Networks %>% filter(!BD_Neural_Networks$Batch_Fold_Index=="D")
BD_Teste<-BD_Neural_Networks %>% filter(BD_Neural_Networks$Batch_Fold_Index=="D")}
if (m==5)
{BD_Treino<-BD_Neural_Networks %>% filter(!BD_Neural_Networks$Batch_Fold_Index=="E")
BD_Teste<-BD_Neural_Networks %>% filter(BD_Neural_Networks$Batch_Fold_Index=="E")}
#Simplificação da formula da rede
var_explicativas<-names(BD_Treino)[4:dim(BD_Treino)[2]]
equacao<-as.formula(paste("gols_man+gols_vis~",paste(var_explicativas,collapse = "+")))
#Elaboração da rede
tempo<-Sys.time()
modelo_rna<-neuralnet(equacao,
data = BD_Treino,
hidden = rede,
act.fct = funcao_ativacao,
learningrate = lr,
threshold = 0.1,
linear.output = F)
previsao_normalizada<-neuralnet::compute(modelo_rna,BD_Teste[,4:dim(BD_Teste)[2]])
previsao_gm<-previsao_normalizada$net.result[,1]*(max(BD_Amostra$gols_man)-min(BD_Amostra$gols_man))+min(BD_Amostra$gols_man)
previsao_gv<-previsao_normalizada$net.result[,2]*(max(BD_Amostra$gols_vis)-min(BD_Amostra$gols_vis))+min(BD_Amostra$gols_vis)
resultado_real_gm<-BD_Teste[,2]*(max(BD_Amostra$gols_man)-min(BD_Amostra$gols_man))+min(BD_Amostra$gols_man)
resultado_real_gv<-BD_Teste[,3]*(max(BD_Amostra$gols_vis)-min(BD_Amostra$gols_vis))+min(BD_Amostra$gols_vis)
desempenho_gm<-(previsao_gm-resultado_real_gm)^2
desempenho_gv<-(previsao_gv-resultado_real_gv)^2
MSE_gm<-mean(desempenho_gm$gols_man)
MSE_gv<-mean(desempenho_gv$gols_vis)
MSE[[m]]<-mean(c(MSE_gm,MSE_gv))
#Executa na última rodada de kfold
if(m==5){
tempo<-Sys.time()-tempo
MSE<-mean(MSE)
} #Retorna o MSE para o valor original
}#Fim do Laço cross validation
rm(var_explicativas,
previsao_normalizada,
previsao_gm,
previsao_gv,
resultado_real_gm,
resultado_real_gv,
desempenho_gm,
desempenho_gv,
MSE_gm,
MSE_gv,
camadas,
neuronios,
rede,
lr,i,i,j,m)
MSE
tempo
rm(BD_Amostra,BD_Teste,BD_Treino,equacao,tempo,funcao_ativacao())
rm(BD_Amostra,BD_Teste,BD_Treino,equacao,tempo,funcao_ativacao
rm(BD_Amostra,BD_Teste,BD_Treino,equacao,tempo,funcao_ativacao)
rm(BD_Amostra,BD_Teste,BD_Treino,equacao,tempo)
View(BD_Neural_Networks)
teste<-BD_Neural_Networks
teste<-teste %>% mutate(teste1=2)
View(teste)
BD_Amostra<-read_excel(paste0(Caminho,"BD_Amostra_Backup.xlsx"))
View(BD_Amostra)
teste<-BD_Neural_Networks %>% select(everything(),-gols_man,-gols_vis)
teste<-BD_Neural_Networks %>% select(everything(),-gols_man - gols_vis)
teste<-BD_Neural_Networks %>% select(everything()-gols_man - gols_vis)
teste<-BD_Neural_Networks
rm(teste)
View(BD_Neural_Networks)
teste<-compute(modelo_rna,BD_Neural_Networks[,4:19])
teste_<-teste$net.result*(max(BD_Amostra$gols_man)-min(BD_Amostra$gols_vis))+min(BD_Amostra$gols_vis)
#Criando um dataset para a matriz de confusão com os valores previstos pelo modelo
previsoes<-compute(modelo_rna,BD_Neural_Networks[,4:19])
BD_Matriz_de_Confusao<-teste$net.result*(max(BD_Amostra$gols_man)-min(BD_Amostra$gols_vis))+min(BD_Amostra$gols_vis)
rm(teste,teste_)
BD_Matriz_de_Confusao<-previsoes$net.result*(max(BD_Amostra$gols_man)-min(BD_Amostra$gols_vis))+min(BD_Amostra$gols_vis)
rm(BD_Matriz_de_Confusao)
BD_Matriz_de_Confusao<-previsoes$net.result[,1]
BD_Matriz_de_Confusao2<-previsoes$net.result[,2]
# Pacotes -----------------------------------------------------------------
library(dplyr)
library("tidyverse")
library(openxlsx)
library(readxl)
library(neuralnet)
library(rpart)
# Banco de dados ----------------------------------------------------------
#Caminho
Caminho=paste0(getwd(),"/")
#Carregar arquivo resultante da etapa anterior
BD_Normalizado<-read_excel(paste0(Caminho,"BD_Normalizado_Backup.xlsx"))
BD_Amostra<-read_excel(paste0(Caminho,"BD_Amostra_Backup.xlsx"))
#Remoção das variáveis times (resultado da etapa de PCA)
BD_Neural_Networks<-BD_Normalizado[,1:19]
rm(BD_Normalizado)
# Variáveis ---------------------------------------------------------------
set.seed(0)
MSE<-0
lr<-0.1
funcao_ativacao<-function(x) log(1+exp(x))
camadas<-1
neuronios<-5
rede<-rep(neuronios,each=camadas)
# Rede --------------------------------------------------------------------
for(m in 1:5){
if (m==1)
{BD_Treino<-BD_Neural_Networks %>% filter(!BD_Neural_Networks$Batch_Fold_Index=="A")
BD_Teste<-BD_Neural_Networks %>% filter(BD_Neural_Networks$Batch_Fold_Index=="A")}
if (m==2)
{BD_Treino<-BD_Neural_Networks %>% filter(!BD_Neural_Networks$Batch_Fold_Index=="B")
BD_Teste<-BD_Neural_Networks %>% filter(BD_Neural_Networks$Batch_Fold_Index=="B")}
if (m==3)
{BD_Treino<-BD_Neural_Networks %>% filter(!BD_Neural_Networks$Batch_Fold_Index=="C")
BD_Teste<-BD_Neural_Networks %>% filter(BD_Neural_Networks$Batch_Fold_Index=="C")}
if (m==4)
{BD_Treino<-BD_Neural_Networks %>% filter(!BD_Neural_Networks$Batch_Fold_Index=="D")
BD_Teste<-BD_Neural_Networks %>% filter(BD_Neural_Networks$Batch_Fold_Index=="D")}
if (m==5)
{BD_Treino<-BD_Neural_Networks %>% filter(!BD_Neural_Networks$Batch_Fold_Index=="E")
BD_Teste<-BD_Neural_Networks %>% filter(BD_Neural_Networks$Batch_Fold_Index=="E")}
#Simplificação da formula da rede
var_explicativas<-names(BD_Treino)[4:dim(BD_Treino)[2]]
equacao<-as.formula(paste("gols_man+gols_vis~",paste(var_explicativas,collapse = "+")))
#Elaboração da rede
tempo<-Sys.time()
modelo_rna<-neuralnet(equacao,
data = BD_Treino,
hidden = rede,
act.fct = funcao_ativacao,
learningrate = lr,
threshold = 0.1,
linear.output = F)
previsao_normalizada<-neuralnet::compute(modelo_rna,BD_Teste[,4:dim(BD_Teste)[2]])
previsao_gm<-previsao_normalizada$net.result[,1]*(max(BD_Amostra$gols_man)-min(BD_Amostra$gols_man))+min(BD_Amostra$gols_man)
previsao_gv<-previsao_normalizada$net.result[,2]*(max(BD_Amostra$gols_vis)-min(BD_Amostra$gols_vis))+min(BD_Amostra$gols_vis)
resultado_real_gm<-BD_Teste[,2]*(max(BD_Amostra$gols_man)-min(BD_Amostra$gols_man))+min(BD_Amostra$gols_man)
resultado_real_gv<-BD_Teste[,3]*(max(BD_Amostra$gols_vis)-min(BD_Amostra$gols_vis))+min(BD_Amostra$gols_vis)
desempenho_gm<-(previsao_gm-resultado_real_gm)^2
desempenho_gv<-(previsao_gv-resultado_real_gv)^2
MSE_gm<-mean(desempenho_gm$gols_man)
MSE_gv<-mean(desempenho_gv$gols_vis)
MSE[[m]]<-mean(c(MSE_gm,MSE_gv))
#Executa na última rodada de kfold
if(m==5){
tempo<-Sys.time()-tempo
MSE<-mean(MSE)
} #Retorna o MSE para o valor original
}#Fim do Laço cross validation
rm(var_explicativas,
previsao_normalizada,
desempenho_gm,
desempenho_gv,
MSE_gm,
MSE_gv,
camadas,
neuronios,
rede,
lr,i,i,j,m)
MSE
tempo
#Matriz de confusão
BD_Matriz_de_Confusao<-cbind(resultado_real_gm,resultado_real_gv,previsao_gm,previsao_gv)
View(BD_Matriz_de_Confusao)
rm(BD_Teste,BD_Treino,resultado_real_gm,resultado_real_gv)
rm(previsao_gm,previsao_gv)
rm(tempo)
BD_Matriz_de_Confusao<- BD_Matriz_de_Confusao %>% mutate(Resultado_Real,Resultado_Previsto)
BD_Matriz_de_Confusao<- BD_Matriz_de_Confusao %>% mutate("Resultado_Real","Resultado_Previsto")
View(BD_Matriz_de_Confusao)
BD_Matriz_de_Confusao<-BD_Matriz_de_Confusao %>%
mutate(Resultado_Real=case_when(
BD_Matriz_de_Confusao$gols_man>BD_Matriz_de_Confusao$gols_vis~"Vitoria_Mandante",
BD_Matriz_de_Confusao$gols_man=BD_Matriz_de_Confusao$gols_vis~"Empate",
BD_Matriz_de_Confusao<-BD_Matriz_de_Confusao %>%
mutate(Resultado_Real=case_when(
BD_Matriz_de_Confusao$gols_man>BD_Matriz_de_Confusao$gols_vis~"Vitoria_Mandante",
BD_Matriz_de_Confusao$gols_man==BD_Matriz_de_Confusao$gols_vis~"Empate",
BD_Matriz_de_Confusao$gols_man<BD_Matriz_de_Confusao~"Vitoria_Visitante"))
BD_Matriz_de_Confusao<-BD_Matriz_de_Confusao %>% mutate(BD_Matriz_de_Confusao$`"Resultado_Real"`=1)
BD_Matriz_de_Confusao<-BD_Matriz_de_Confusao %>% mutate(BD_Matriz_de_Confusao$`"Resultado_Real"`==1)
View(BD_Matriz_de_Confusao)
BD_Matriz_de_Confusao<-select(BD_Matriz_de_Confusao,everything(),-Resultado_Real)
View(BD_Matriz_de_Confusao)
BD_Matriz_de_Confusao<-select(BD_Matriz_de_Confusao,everything(),-"Resultado_Real")
View(BD_Matriz_de_Confusao)
BD_Matriz_de_Confusao<-select(BD_Matriz_de_Confusao,gols_man,gols_vis,previsao_gm,previsao_gv)
BD_Matriz_de_Confusao<-BD_Matriz_de_Confusao %>% select(gols_man, gols_vis, previsao_gm, previsao_gv)
BD_Matriz_de_Confusao %>% transmute(BD_Matriz_de_Confusao,gols_man,gols_vis,previsao_gm,previsao_gv)
BD_Matriz_de_Confusao<-BD_Matriz_de_Confusao %>% transmute(BD_Matriz_de_Confusao,gols_man,gols_vis,previsao_gm,previsao_gv)
# Pacotes -----------------------------------------------------------------
library(dplyr)
library("tidyverse")
library(openxlsx)
library(readxl)
library(neuralnet)
library(rpart)
# Banco de dados ----------------------------------------------------------
#Caminho
Caminho=paste0(getwd(),"/")
#Carregar arquivo resultante da etapa anterior
BD_Normalizado<-read_excel(paste0(Caminho,"BD_Normalizado_Backup.xlsx"))
BD_Amostra<-read_excel(paste0(Caminho,"BD_Amostra_Backup.xlsx"))
#Remoção das variáveis times (resultado da etapa de PCA)
BD_Neural_Networks<-BD_Normalizado[,1:19]
rm(BD_Normalizado)
# Variáveis ---------------------------------------------------------------
set.seed(0)
MSE<-0
lr<-0.1
funcao_ativacao<-function(x) log(1+exp(x))
camadas<-1
neuronios<-5
rede<-rep(neuronios,each=camadas)
# Rede --------------------------------------------------------------------
for(m in 1:5){
if (m==1)
{BD_Treino<-BD_Neural_Networks %>% filter(!BD_Neural_Networks$Batch_Fold_Index=="A")
BD_Teste<-BD_Neural_Networks %>% filter(BD_Neural_Networks$Batch_Fold_Index=="A")}
if (m==2)
{BD_Treino<-BD_Neural_Networks %>% filter(!BD_Neural_Networks$Batch_Fold_Index=="B")
BD_Teste<-BD_Neural_Networks %>% filter(BD_Neural_Networks$Batch_Fold_Index=="B")}
if (m==3)
{BD_Treino<-BD_Neural_Networks %>% filter(!BD_Neural_Networks$Batch_Fold_Index=="C")
BD_Teste<-BD_Neural_Networks %>% filter(BD_Neural_Networks$Batch_Fold_Index=="C")}
if (m==4)
{BD_Treino<-BD_Neural_Networks %>% filter(!BD_Neural_Networks$Batch_Fold_Index=="D")
BD_Teste<-BD_Neural_Networks %>% filter(BD_Neural_Networks$Batch_Fold_Index=="D")}
if (m==5)
{BD_Treino<-BD_Neural_Networks %>% filter(!BD_Neural_Networks$Batch_Fold_Index=="E")
BD_Teste<-BD_Neural_Networks %>% filter(BD_Neural_Networks$Batch_Fold_Index=="E")}
#Simplificação da formula da rede
var_explicativas<-names(BD_Treino)[4:dim(BD_Treino)[2]]
equacao<-as.formula(paste("gols_man+gols_vis~",paste(var_explicativas,collapse = "+")))
#Elaboração da rede
tempo<-Sys.time()
modelo_rna<-neuralnet(equacao,
data = BD_Treino,
hidden = rede,
act.fct = funcao_ativacao,
learningrate = lr,
threshold = 0.1,
linear.output = F)
previsao_normalizada<-neuralnet::compute(modelo_rna,BD_Teste[,4:dim(BD_Teste)[2]])
previsao_gm<-previsao_normalizada$net.result[,1]*(max(BD_Amostra$gols_man)-min(BD_Amostra$gols_man))+min(BD_Amostra$gols_man)
previsao_gv<-previsao_normalizada$net.result[,2]*(max(BD_Amostra$gols_vis)-min(BD_Amostra$gols_vis))+min(BD_Amostra$gols_vis)
resultado_real_gm<-BD_Teste[,2]*(max(BD_Amostra$gols_man)-min(BD_Amostra$gols_man))+min(BD_Amostra$gols_man)
resultado_real_gv<-BD_Teste[,3]*(max(BD_Amostra$gols_vis)-min(BD_Amostra$gols_vis))+min(BD_Amostra$gols_vis)
desempenho_gm<-(previsao_gm-resultado_real_gm)^2
desempenho_gv<-(previsao_gv-resultado_real_gv)^2
MSE_gm<-mean(desempenho_gm$gols_man)
MSE_gv<-mean(desempenho_gv$gols_vis)
MSE[[m]]<-mean(c(MSE_gm,MSE_gv))
#Executa na última rodada de kfold
if(m==5){
tempo<-Sys.time()-tempo
MSE<-mean(MSE)
} #Retorna o MSE para o valor original
}#Fim do Laço cross validation
MSE
tempo
#Matriz de confusão
BD_Matriz_de_Confusao<-cbind(resultado_real_gm,resultado_real_gv,previsao_gm,previsao_gv)
View(BD_Matriz_de_Confusao)
BD_Matriz_de_Confusao<- BD_Matriz_de_Confusao %>% mutate(Resultado_Real,Resultado_Previsto)
View(BD_Matriz_de_Confusao)
BD_Matriz_de_Confusao<- BD_Matriz_de_Confusao %>% mutate(Resultado_Real=1,Resultado_Previsto=2)
View(BD_Matriz_de_Confusao)
BD_Matriz_de_Confusao<- BD_Matriz_de_Confusao %>% mutate(Resultado_Real=3,Resultado_Previsto=4)
View(BD_Matriz_de_Confusao)
BD_Matriz_de_Confusao<- BD_Matriz_de_Confusao %>% mutate(Resultado_Real=case_when(
BD_Matriz_de_Confusao$gols_man>BD_Matriz_de_Confusao$gols_vis~"Vitoria_Mandante",
BD_Matriz_de_Confusao$gols_man==BD_Matriz_de_Confusao$gols_vis~"Empate",
BD_Matriz_de_Confusao$gols_man<BD_Matriz_de_Confusao~"Vitoria_Visitante"),Resultado_Previsto=4)
BD_Matriz_de_Confusao<- BD_Matriz_de_Confusao %>% mutate(Resultado_Real=3,Resultado_Previsto=4)
View(BD_Matriz_de_Confusao)
BD_Matriz_de_Confusao<-BD_Matriz_de_Confusao %>%
mutate(Resultado_Real=case_when(
BD_Matriz_de_Confusao$gols_man>BD_Matriz_de_Confusao$gols_vis~"Vitoria_Mandante",
BD_Matriz_de_Confusao$gols_man==BD_Matriz_de_Confusao$gols_vis~"Empate",
BD_Matriz_de_Confusao$gols_man<BD_Matriz_de_Confusao~"Vitoria_Visitante"))
View(BD_Matriz_de_Confusao)
summary(BD_Matriz_de_Confusao)
?case_when
# Pacotes -----------------------------------------------------------------
library(dplyr)
BD_Matriz_de_Confusao<-BD_Matriz_de_Confusao %>%
mutate(Resultado_Real=case_when(
BD_Matriz_de_Confusao$gols_man>BD_Matriz_de_Confusao$gols_vis~"Vitoria_Mandante",
BD_Matriz_de_Confusao$gols_man=BD_Matriz_de_Confusao$gols_vis~"Empate",
View(BD_Matriz_de_Confusao)
BD_Matriz_de_Confusao<-BD_Matriz_de_Confusao %>%
mutate(Resultado_Real=case_when(
BD_Matriz_de_Confusao$gols_man>BD_Matriz_de_Confusao$gols_vis ~ "Vitoria_Mandante",
BD_Matriz_de_Confusao$gols_man=BD_Matriz_de_Confusao$gols_vis ~ "Empate",
BD_Matriz_de_Confusao<-BD_Matriz_de_Confusao %>%
mutate(Resultado_Real=case_when(
BD_Matriz_de_Confusao$gols_man>BD_Matriz_de_Confusao$gols_vis ~ "Vitoria_Mandante",
BD_Matriz_de_Confusao$gols_man=BD_Matriz_de_Confusao$gols_vis ~ "Empate",
BD_Matriz_de_Confusao<-BD_Matriz_de_Confusao %>%
mutate(Resultado_Real=case_when(
BD_Matriz_de_Confusao$gols_man>BD_Matriz_de_Confusao$gols_vis~"Vitoria_Mandante",
BD_Matriz_de_Confusao$gols_man=BD_Matriz_de_Confusao$gols_vis~"Empate",
BD_Matriz_de_Confusao<-BD_Matriz_de_Confusao %>%
mutate(Resultado_Real=case_when(
BD_Matriz_de_Confusao$gols_man>BD_Matriz_de_Confusao$gols_vis~"Vitoria_Mandante",
BD_Matriz_de_Confusao$gols_man==BD_Matriz_de_Confusao$gols_vis~"Empate",
BD_Matriz_de_Confusao$gols_man<BD_Matriz_de_Confusao$gols_vis~"Vitoria_Visitante"))
BD_Matriz_de_Confusao<- BD_Matriz_de_Confusao %>% mutate(
Resultado_Real=case_when(
BD_Matriz_de_Confusao$gols_man>BD_Matriz_de_Confusao$gols_vis~"Vitoria_Mandante",
BD_Matriz_de_Confusao$gols_man==BD_Matriz_de_Confusao$gols_vis~"Empate",
BD_Matriz_de_Confusao$gols_man<BD_Matriz_de_Confusao$gols_vis~"Vitoria_Visitante"),
Resultado_Previsto=case_when(
BD_Matriz_de_Confusao$previsao_gm>BD_Matriz_de_Confusao$previsao_gv~"Vitoria_Mandante",
BD_Matriz_de_Confusao$previsao_gm==BD_Matriz_de_Confusao$previsao_gv~"Empate",
BD_Matriz_de_Confusao$previsao_gm<BD_Matriz_de_Confusao$previsao_gv~"Vitoria_Visitante"
))
View(BD_Matriz_de_Confusao)
?round
round(BD_Matriz_de_Confusao$previsao_gm[1])
round(BD_Matriz_de_Confusao$previsao_gm[2])
round(BD_Matriz_de_Confusao$previsao_gm[3])
View(BD_Matriz_de_Confusao)
BD_Matriz_de_Confusao<-BD_Matriz_de_Confusao %>% mutate(
BD_Matriz_de_Confusao$previsao_gm==round(BD_Matriz_de_Confusao$previsao_gm),
BD_Matriz_de_Confusao$previsao_gv==round(BD_Matriz_de_Confusao$previsao_gv)
)
View(BD_Matriz_de_Confusao)
BD_Matriz_de_Confusao<-BD_Matriz_de_Confusao %>% mutate(
BD_Matriz_de_Confusao$previsao_gm=round(BD_Matriz_de_Confusao$previsao_gm),
View(BD_Matriz_de_Confusao)
# Pacotes -----------------------------------------------------------------
library(dplyr)
library("tidyverse")
library(openxlsx)
library(readxl)
library(neuralnet)
library(rpart)
# Banco de dados ----------------------------------------------------------
#Caminho
Caminho=paste0(getwd(),"/")
#Carregar arquivo resultante da etapa anterior
BD_Normalizado<-read_excel(paste0(Caminho,"BD_Normalizado_Backup.xlsx"))
BD_Amostra<-read_excel(paste0(Caminho,"BD_Amostra_Backup.xlsx"))
#Remoção das variáveis times (resultado da etapa de PCA)
BD_Neural_Networks<-BD_Normalizado[,1:19]
rm(BD_Normalizado)
# Variáveis ---------------------------------------------------------------
set.seed(0)
MSE<-0
lr<-0.1
funcao_ativacao<-function(x) log(1+exp(x))
camadas<-1
neuronios<-5
rede<-rep(neuronios,each=camadas)
# Rede --------------------------------------------------------------------
for(m in 1:5){
if (m==1)
{BD_Treino<-BD_Neural_Networks %>% filter(!BD_Neural_Networks$Batch_Fold_Index=="A")
BD_Teste<-BD_Neural_Networks %>% filter(BD_Neural_Networks$Batch_Fold_Index=="A")}
if (m==2)
{BD_Treino<-BD_Neural_Networks %>% filter(!BD_Neural_Networks$Batch_Fold_Index=="B")
BD_Teste<-BD_Neural_Networks %>% filter(BD_Neural_Networks$Batch_Fold_Index=="B")}
if (m==3)
{BD_Treino<-BD_Neural_Networks %>% filter(!BD_Neural_Networks$Batch_Fold_Index=="C")
BD_Teste<-BD_Neural_Networks %>% filter(BD_Neural_Networks$Batch_Fold_Index=="C")}
if (m==4)
{BD_Treino<-BD_Neural_Networks %>% filter(!BD_Neural_Networks$Batch_Fold_Index=="D")
BD_Teste<-BD_Neural_Networks %>% filter(BD_Neural_Networks$Batch_Fold_Index=="D")}
if (m==5)
{BD_Treino<-BD_Neural_Networks %>% filter(!BD_Neural_Networks$Batch_Fold_Index=="E")
BD_Teste<-BD_Neural_Networks %>% filter(BD_Neural_Networks$Batch_Fold_Index=="E")}
#Simplificação da formula da rede
var_explicativas<-names(BD_Treino)[4:dim(BD_Treino)[2]]
equacao<-as.formula(paste("gols_man+gols_vis~",paste(var_explicativas,collapse = "+")))
#Elaboração da rede
tempo<-Sys.time()
modelo_rna<-neuralnet(equacao,
data = BD_Treino,
hidden = rede,
act.fct = funcao_ativacao,
learningrate = lr,
threshold = 0.1,
linear.output = F)
previsao_normalizada<-neuralnet::compute(modelo_rna,BD_Teste[,4:dim(BD_Teste)[2]])
previsao_gm<-previsao_normalizada$net.result[,1]*(max(BD_Amostra$gols_man)-min(BD_Amostra$gols_man))+min(BD_Amostra$gols_man)
previsao_gv<-previsao_normalizada$net.result[,2]*(max(BD_Amostra$gols_vis)-min(BD_Amostra$gols_vis))+min(BD_Amostra$gols_vis)
resultado_real_gm<-BD_Teste[,2]*(max(BD_Amostra$gols_man)-min(BD_Amostra$gols_man))+min(BD_Amostra$gols_man)
resultado_real_gv<-BD_Teste[,3]*(max(BD_Amostra$gols_vis)-min(BD_Amostra$gols_vis))+min(BD_Amostra$gols_vis)
desempenho_gm<-(previsao_gm-resultado_real_gm)^2
desempenho_gv<-(previsao_gv-resultado_real_gv)^2
MSE_gm<-mean(desempenho_gm$gols_man)
MSE_gv<-mean(desempenho_gv$gols_vis)
MSE[[m]]<-mean(c(MSE_gm,MSE_gv))
#Executa na última rodada de kfold
if(m==5){
tempo<-Sys.time()-tempo
MSE<-mean(MSE)
} #Retorna o MSE para o valor original
}#Fim do Laço cross validation
MSE
tempo
# Matriz de Confusão ------------------------------------------------------
BD_Matriz_de_Confusao<-cbind(resultado_real_gm,resultado_real_gv,previsao_gm,previsao_gv)
View(BD_Matriz_de_Confusao)
View(BD_Matriz_de_Confusao)
f
#verificar
BD_Matriz_de_Confusao<-BD_Matriz_de_Confusao %>% mutate(
BD_Matriz_de_Confusao$previsao_gm=round(BD_Matriz_de_Confusao$previsao_gm),
View(BD_Matriz_de_Confusao)
#verificar
teste<-BD_Matriz_de_Confusao %>% mutate(
BD_Matriz_de_Confusao$previsao_gm==round(BD_Matriz_de_Confusao$previsao_gm),
BD_Matriz_de_Confusao$previsao_gv==round(BD_Matriz_de_Confusao$previsao_gv)
)
View(teste)
teste<-select(teste,gols_man,gols_vis)
?select
rm
rm(teste)
#verificar
teste<-BD_Matriz_de_Confusao %>% mutate(
round(BD_Matriz_de_Confusao$previsao_gm),
round(BD_Matriz_de_Confusao$previsao_gv)
)
View(teste)
View(BD_Teste)
View(teste)
#verificar
teste<-BD_Matriz_de_Confusao %>% mutate(
previsao_gm=round(BD_Matriz_de_Confusao$previsao_gm),
previsao_gv=round(BD_Matriz_de_Confusao$previsao_gv)
)
View(teste)
View(BD_Matriz_de_Confusao)
View(teste)
#Arredondamento dos valores previstos
BD_Matriz_de_Confusao<-BD_Matriz_de_Confusao %>% mutate(
previsao_gm=round(BD_Matriz_de_Confusao$previsao_gm),
previsao_gv=round(BD_Matriz_de_Confusao$previsao_gv))
#Classificação dos resultados
BD_Matriz_de_Confusao<- BD_Matriz_de_Confusao %>% mutate(
Resultado_Real=case_when(
BD_Matriz_de_Confusao$gols_man>BD_Matriz_de_Confusao$gols_vis~"Vitoria_Mandante",
BD_Matriz_de_Confusao$gols_man==BD_Matriz_de_Confusao$gols_vis~"Empate",
BD_Matriz_de_Confusao$gols_man<BD_Matriz_de_Confusao$gols_vis~"Vitoria_Visitante"),
Resultado_Previsto=case_when(
BD_Matriz_de_Confusao$previsao_gm>BD_Matriz_de_Confusao$previsao_gv~"Vitoria_Mandante",
BD_Matriz_de_Confusao$previsao_gm==BD_Matriz_de_Confusao$previsao_gv~"Empate",
BD_Matriz_de_Confusao$previsao_gm<BD_Matriz_de_Confusao$previsao_gv~"Vitoria_Visitante"
))
View(BD_Matriz_de_Confusao)
library(tidyverse)
library(tidymodels)
install.packages("tidymodels")
library(tidyverse)
library(tidymodels)
head(two_class_example)
View(BD_Matriz_de_Confusao)
BD_Matriz_de_Confusao %>% conf_mat(truth = Resultado_Real,estimate = Resultado_Previsto,dnn=c("previsto","real"))
teste<-BD_Matriz_de_Confusao
teste$Resultado_Real<-as.factor(teste$Resultado_Real)
teste$Resultado_Previsto<-as.factor(teste$Resultado_Previsto)
teste %>% conf_mat(truth = Resultado_Real,estimate = Resultado_Previsto,dnn=c("previsto","real"))
library(openxlsx)
library(readxl)
write.xlsx(teste, "teste_mat_conf.xlsx",sheetName = "Amostra")
BD_Matriz_de_Confusao %>% accuracy(truth = Resultado_Real,estimate = Resultado_Previsto)
BD_Matriz_de_Confusao$Resultado_Real<-as.factor(BD_Matriz_de_Confusao$Resultado_Real)
BD_Matriz_de_Confusao$Resultado_Previsto<-as.factor(BD_Matriz_de_Confusao$Resultado_Previsto)
BD_Matriz_de_Confusao %>% conf_mat(truth = Resultado_Real,estimate = Resultado_Previsto,dnn=c("previsto","real"))
BD_Matriz_de_Confusao %>% accuracy(truth = Resultado_Real,estimate = Resultado_Previsto)
BD_Matriz_de_Confusao %>% sens(truth = Resultado_Real,estimate = Resultado_Previsto)
BD_Matriz_de_Confusao %>% spec(truth = Resultado_Real,estimate = Resultado_Previsto)
BD_Matriz_de_Confusao %>% roc_curve(truth = Resultado_Real,estimate = Resultado_Previsto) %>% autoplot()
source("C:/Users/leaud/OneDrive/Área de Trabalho/TCC/5_TCC_Neural_Networks_Pontual.R")
